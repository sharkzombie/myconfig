if whence less >/dev/null ; then
  alias more=less
else
  unalias more
fi

if [[ ! -z $HOST && -r ~/.zalias.$HOST ]] ; then
  . ~/.zalias.$HOST
fi

alias find-emacs-emacs='ps -eafl | grep emacs | grep server-sta | egrep -v irc\|SCREEN'
alias my-screen=my-scrn
alias grep=egrep

#
# ls
#
alias l=ls
alias t=lt
alias ll='ls -l $LS_HUMAN'
alias lll='ls -l'
alias lt='ls -t'
alias llt='ls -lt $LS_HUMAN'
alias llh='ls -lt $LS_HUMAN|head'
alias d='dirs -v'

alias showdpms='xset -q | grep -A1 DPMS'

if command -v emacs >/dev/null 2>&1 ; then
  alias vi='connect-emacs emacs'
else
  alias vi=vim
fi

alias killaj='kill $(alljobs)'

function _is_good_ssh_auth_sock() {
    local SSH_AUTH_SOCK
    export SSH_AUTH_SOCK=$1
    ssh-add -l > /dev/null 2>/dev/null 
    (( $? == 0 || $? == 1 ))
}

(){
    ## goddamn complicated business, coz checking if SSH_AUTH_SOCKET is good
    ## takes 2 second or so (timeout on connecting to UNIX domain socket
    ##
    ## So we check if ~/.ssh_auth_File is good, if it is, we just set
    ## SSH_AUTH_SOCK from it
    ##
    ## If ~/.ssh_auth_sock exists, but sets ssh_auth_sock to empty string
    ## or not path to a socket, we just exit, this prevents us repeatedly
    ## checking bad SSH_AUTH_SOCK value in the next step if we started screen
    ## from something that had SSH_AUTH_SOCK variable that had now became
    ## invalid.
    ##
    ## Next we check if SSH_AUTH_SOCK is set. If it is, and ~/.ssh_auth_sock
    ## was missing or pointing to bad socket, we check if SSH_AUTH_SOCK
    ## is good.  If its good, we save it in ~/.ssh_auth_sock, 
    ##
    ## As a last step we reset ~/.ssh_auth_sock to empty string. This prevents
    ## farther checking of SSH_AUTH_SOCK by subsequent logon shells
    local ssh_auth_sock_file_status

    if [[ -f ~/.ssh_auth_sock ]] ; then
        ssh_auth_sock_file_status=exist
        unset ssh_auth_sock
        . ~/.ssh_auth_sock
        if [[ -S $last_ssh_auth_sock ]] ; then
            if _is_good_ssh_auth_sock $last_ssh_auth_sock ; then
                ssh_auth_sock_file_status=good
            else
                ssh_auth_sock_file_status=badsocket
            fi
        else
            ssh_auth_sock_file_status=undef
        fi
    else
        ssh_auth_sock_file_status=missing
    fi

    if [[ $ssh_auth_sock_file_status == good ]] ; then
        # iprint file status was good so setting it from it
        export SSH_AUTH_SOCK=$last_ssh_auth_sock
    elif [[ $ssh_auth_sock_file_status != good && -n $SSH_AUTH_SOCK ]] ; then
        if [[ $ssh_auth_sock_file_status != undef ]] && _is_good_ssh_auth_sock $SSH_AUTH_SOCK ; then
            if [[ $ssh_auth_sock_file_status != good ]] ; then
                # iprint status was $ssh_auth_sock_file_status and SSH_AUTH_SOCK was good so saved it in ~/.ssh_auth_file
                echo last_ssh_auth_sock=$SSH_AUTH_SOCK > ~/.ssh_auth_sock
            else
                #iprint Both SSH_AUTH_SOCK and ~/.ssh_auth_sock are good
            fi
        else
	    if [[ $ssh_auth_sock_file_status != undef ]] ; then
		iprint No SSH agent available, resetting ~/.ssh_auth_sock
		echo last_ssh_auth_sock= > ~/.ssh_auth_sock
	    fi
        fi
    else 
        if [[ $ssh_auth_sock_file_status != undef ]] ; then
	    iprint No SSH agent available, resetting ~/.ssh_auth_sock
	    echo last_ssh_auth_sock= > ~/.ssh_auth_sock
	fi
    fi
}

